//input your api key into line 14

//npm install node-fetch delay
//node filename.mjs

//will take 30 mintes

import fetch from 'node-fetch';
import fs from 'fs/promises';
import path from 'path';
import delay from 'delay';

const API_KEY = '-1238-4c-9330-de9506a97c65';
const BASE_URL = 'https://api.solanabeach.io/v1';
const OUTPUT_FILE = 'validators_data.json'; // File to store all validators data

async function fetchAllValidators() {
    const url = `${BASE_URL}/validators/all`;
    const headers = {
        'Accept': 'application/json',
        'Authorization': API_KEY
    };

    try {
        const response = await fetch(url, { headers });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error('Error fetching validators:', error.message);
        return [];
    }
}

async function fetchValidatorInformation(votePubkey) {
    const url = `${BASE_URL}/validator/${votePubkey}`;
    const headers = {
        'Accept': 'application/json',
        'Authorization': API_KEY
    };

    try {
        const response = await fetch(url, { headers });
        const creditsRemaining = parseInt(response.headers.get('Solana-Beach-Standard-Credits-Remaining'), 10);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();  // Get the JSON response body

        if (creditsRemaining <= 1) {
            console.log('Low on credits, pausing until they replenish...');
            await delay(10000);  // Delay for 10 seconds
        }

        console.log(`Retrieved information for validator ${votePubkey}: Moniker: ${data.validator.moniker || ''}`);
        return {
            nodePubkey: data.validator.nodePubkey,
            votePubkey: data.validator.votePubkey,
            country: data.validator.location?.country || '',
            timezone: data.validator.location?.timezone || '',
            ll: data.validator.location?.ll || [0, 0],
            moniker: data.validator.moniker || ''
        };
    } catch (error) {
        console.log(`Error fetching data for ${votePubkey}: ${error.message}`);
        return null;  // Return null on error to handle it in the calling function
    }
}

async function saveAllValidatorsToFile(validatorsData) {
    try {
        await fs.writeFile(OUTPUT_FILE, JSON.stringify(validatorsData, null, 2));
        console.log(`Data for all validators saved to ${OUTPUT_FILE}`);
    } catch (error) {
        console.error(`Error writing to file ${OUTPUT_FILE}:`, error);
    }
}

(async () => {
    const validators = await fetchAllValidators();
    const results = [];

    for (const validator of validators) {
        const info = await fetchValidatorInformation(validator.votePubkey);
        if (info) {
            results.push(info);
        }
    }

    await saveAllValidatorsToFile(results);
})();

